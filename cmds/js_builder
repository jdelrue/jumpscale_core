#! /usr/bin/env python3

"""
This script is used to quickly deploy a ubuntu container on a 0-OS node and allow you to ssh into it

This container is used to build flist, it contains already preinstalled tools like git, mc, build-essential.

"""

import time

import click
from jumpscale import j


def _check():
    """
    will check if VM is active, if not will start
    will get zos client and wait till active e.g. after start
    :return:
    """
    if "builder" not in j.clients.zos.list() or j.clients.zos.get('builder').addr=="localhost":
        if "builder" not in j.clients.virtualbox.list():
            _init()

        vb = j.clients.virtualbox.get(instance="builder", interactive=False)

        if not "builder" in vb.vm_list():
            _init()

        vm = vb.vm_get("builder")

        if vm.is_running==False:
            print("starting VM for ZOS")
            vm.start()

    node = j.clients.zos.get('builder')

    print("check & wait for ZOS to be running, when just started can take a while")
    node.is_running()

    return node

def _init():
    """
    had to put it separate so could be used by others
    """
    print("init js_builder")
    j.clients.virtualbox.zero_os_get(name="builder", redis_port=4445)
    node = j.clients.zos.get('builder')
    node.zerodbs.partition_and_mount_disks()

def _node(name,addr,port):
    sshclient = j.clients.ssh.new(addr=addr, port=port, instance=name, die=True, login="root", passwd="rooter",
                                  stdout=True, allow_agent=False, addr_priv="", port_priv=22, use_paramiko=True)

    print("waiting for ssh to start for container:%s\n    (if the ZOS VM is new, will take a while, OS files are being downloaded)"%name)
    for i in range(50):
        try:
            res = sshclient.connect()
            rc,out,err=sshclient.execute("which bash")
            if "bash" in out:
                break
        except j.exceptions.RuntimeError as e:
            if "Could not connect to" in str(e):
                continue
            raise e

    print("ssh connected")
    sshclient.ssh_authorize(user="root", key=j.clients.sshkey.list()[0])

    node = j.tools.nodemgr.set(cat="container", name=name, sshclient=name, selected=True)

    print('container deployed')
    print("to connect to it do: 'ssh root@%s -p %s' (password: rooter)" % (addr,port))
    print("can also connect using js_node toolset, recommended: 'js_node ssh -i %s'"%name)


    return node

def _zos_node():
    node = _check()
    if node.addr == 'localhost':
        # cf zdb
        node = j.clients.virtualbox.zero_os_private(node)
    return node

@click.group()
def cli():
    pass


@click.command()
@click.argument('ip', default=None, required=False)
def configure(ip=None):
    """
    configure the zero-os, also make sure partitions are done for zerodb, need ip addr

    ipaddr of zero-os if not specified then will be localhost (VM) on port 4445


    """
    print("configure on ip:%s"%ip)
    if ip is not None:
        data = {'host': ip}
    else:
        data = {'host': 'localhost', 'port': 4445}

    node = j.clients.zos.get('builder', data=data)
    node.zerodbs.partition_and_mount_disks()
    print("zero-os node configured")

@click.command()
def reset():
    """
    will remove all containers from the zero-os

    """
    if "builder" in j.clients.zos.list():
        node = j.clients.zos.get('builder')
        for cont in node.containers.list():
            if cont.name is not "zrobot":
                cont.stop()
        for mount in  node.list_mounts():
            if "/mnt/zdbs" in mount.mountpoint:
                print("unmount:%s"%mount.mountpoint)  #TODO:*1

    node.wipedisks()
    print("zero-os clean")

@click.command()
def destroy():
    """
    will remove the virtualbox vm for ZOS
    :return:
    """

    if "builder" not in j.clients.virtualbox.list():
        return

    vb = j.clients.virtualbox.get(instance="builder", interactive=False)

    if not "builder" in vb.vm_list():
        return

    vm = vb.vm_get("builder")
    vm.stop()
    vm.delete()


@click.command()
def init():
    """
    use virtualbox to launch a zero-os on your machine (tested on linux and osx)
    the name of the machine is builder
    """
    _init()


@click.command()
@click.option('--name', '-n', default='zdb_builder', help='name of the zdb instance')
@click.option('--mode', '-m', default='seq', help='seq or user mode')
@click.option('--port', '-p', default=4500, help='port which will be exposed for the zerodb container, there is no admin passwd!')
@click.option('--size', '-s', default=50, help='maximum amount of storage for the zerodb in GiB')
def zdb(name, mode, port, size):
    """
    create a zdb container
    """
    node = j.clients.zos.get('builder')
    logger = j.logger.get()

    if node.addr == 'localhost':
        # assume that if remote is localhost
        # we try to reach a virtual machine with port forwarding
        # from localhost to the machine, let's grab the reachable
        # address of the virtual machine
        node = j.clients.virtualbox.zero_os_private(node)

    print("finding best disk where to deploy zdb...")
    # find best disk where to deploy zdb
    storage_pools = node.storagepools.list()
    storage_pools = sorted(storage_pools, key=lambda sp: sp.info['used'], reverse=True)
    # used the disk with the more space available

    zdbs=node.zerodbs.list()


    name2 = "builder_zdb_%s" % name
    mountpoints = [mount.mountpoint for mount in node.list_mounts()]
    mountpoints = [item for item in mountpoints if item.find(name2)is not -1]
    if len(mountpoints)==0:
        mountpoint, _ = node.zerodbs.create_and_mount_subvolume(
            storagepool=storage_pools[0],
            name="builder_zdb_%s" % name,
            size=size)
    else:
        mountpoint = mountpoints[0]

    zdb = node.zerodbs.create(name=name, path=mountpoint, mode=mode, node_port=port)
    zdb.flist = "https://hub.grid.tf/tf-autobuilder/threefoldtech-0-db-development.flist"
    # if zdb.is_running()[0]==True:
    #     zdb.stop()
    zdb.deploy()

    zdb_cl = j.clients.zdb.configure(instance=name, secrets='',
                            addr=node.addr, port=zdb.node_port,
                            adminsecret='', mode=mode,
                            encryptionkey='')

    # zdb_cl = j.clients.zdb.configure(instance='%s_internal'%name, secrets='',
    #                         addr=str(zdb.container.default_ip().ip), port=9900,
    #                         adminsecret='', mode=mode,
    #                         encryptionkey='')


    assert zdb_cl.mode==mode
    cl = zdb_cl.namespace_get("default")
    if not cl.redis.ping():
        raise RuntimeError("could not connect to zdb")

    print('zdb deployed')
    print('in jumpscale use as:\n    j.clients.zdb.get(\'%s\')' % name)
    print('reach it publicly at %s:%s' % (node.addr, zdb.node_port))
    print('reach it internally at %s:9900' % str(zdb.container.default_ip().ip))


@click.command()
def container():
    """
    create a build container in zero-os and launch ubuntu with lots of tools pre-installed to make building easy
    """

    node = _zos_node()

    print('creating builder container...')
    container = node.containers.create(name='builder',
                                       flist='https://hub.grid.tf/tf-official-apps/ubuntu-bionic-build.flist',
                                       nics=[{'type': 'default'}],
                                       ports={2222: 22})

    node = _node(name="builder",addr=node.addr,port=2222)


@click.command()
@click.option('--name', '-n', default='main', help='name of the digitalme container')
@click.option('--port', '-p', default=3333, help='port which will be exposed for ssh')
def digitalme(name, port):
    """
    create a digital me container
    connect to zerotier network 1d7193940435f485, this is an ipv6 zerotier network which connects all digitalme's
    """

    node = _zos_node()

    print('creating digitalme container...')
    name = "dm_"+name
    container = node.containers.create(name=name,
                                       flist='https://hub.grid.tf/tf-official-apps/ubuntu-bionic-build.flist',
                                       nics=[{'type': 'default'}, {'type': 'zerotier', 'id': '1d7193940435f485'}],
                                       ports={port: 22})

    ssh_container_node = _node(name=name, addr=node.addr, port=port)

    print('digitalme container deployed (in debug mode)')
    print("can also connect using js_node toolset, recommended: 'js_node ssh -i %s'" % name)

    n = j.tools.nodemgr.get(instance=name)

    n.prefab.jumpscale.jumpscalecore.install(full=False) #full does not seem to be needed

    from IPython import embed; embed()


cli.add_command(init)
cli.add_command(configure)
cli.add_command(zdb)
cli.add_command(container)
cli.add_command(digitalme)
cli.add_command(reset)
cli.add_command(destroy)

if __name__ == '__main__':
    cli()
