#!/usr/bin/env python3

import IPython
import rpyc

import sys
import time

import hexdump

def get_handle_const(num):
    for objname in dir(rpyc.core.consts):
        if not objname.startswith('HANDLE_'):
            continue
        if getattr(rpyc.core.consts, objname) == num:
            return objname[7:]
    return '<?>'

# monkey-patch the channel so that it's possible to
# see what traffic is going back and forth
class LogChannel(rpyc.core.channel.Channel):
    COMPRESSION_THRESHOLD=10
    isLoggingOn = True
    _logFile = open("/tmp/log.txt", "w")

    def dbg(self, report, length, data):
        hd = '\n'.join(hexdump.dumpgen(data or b''))
        (typ, seq, (action, unpack)) = rpyc.core.brine.load(data)
        action = get_handle_const(action)
        hd += "\n" + "%d %d %s %s" % (typ, seq, action, repr(unpack))
        self._logFile.write("\n" + time.asctime() + " " + length + " " +\
                    str(self.compress) + " %s\n" % report + hd + '\n')
    def recv(self):
        data = super(LogChannel, self).recv()
        if self.isLoggingOn:
            self.dbg('RECV', str(len(data)), data)
        return data
    def send(self, data):
        nsent = super(LogChannel, self).send(data)
        if self.isLoggingOn:
            self.dbg('SEND', nsent, data)
        return nsent

rpyc.core.channel.Channel = LogChannel
rpyc.utils.factory.Channel = LogChannel

if len(sys.argv) == 2:
    host = sys.argv[1]
else:
    host = "localhost"

c = rpyc.classic.connect(host, 18861)

with rpyc.classic.redirected_stdio(c):
    j = c.root.j
    #j.core.application.start("jsshell@%s" % host)
    IPython.embed()  
    #j.core.application.stop()
